{
  "type": "deployment",
  "id": "OpenxAIGenesis",
  "batch": "mainnet-genesis",
  "batchIndex": 0,
  "deploymentAddress": "0xaC72cf714717308962F131d5e727331127e2e02d",
  "constructorArgs": [
    "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419",
    ["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],
    [
      "0xdAC17F958D2ee523a2206206994597C13D831ec7",
      "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
    ],
    [
      {
        "amount": "15000000000",
        "escrow": "0xC37d5311CCDac65A29a3E3F57123B0b1D89e82Cf"
      },
      {
        "amount": "30000000000",
        "escrow": "0x13A13773E3F118b9028f348e10E2961ADA301595"
      },
      {
        "amount": "20000000000",
        "escrow": "0xa95D692b148beC100396F455c42aAb678469CBE5"
      },
      {
        "amount": "5000000000",
        "escrow": "0x5aC70708Db921e29Fc30EC11dEf27b2C58b78FFa"
      },
      {
        "amount": "5000000000",
        "escrow": "0xAfB509213365bAE569ddC1422D9c999eB1038e47"
      },
      {
        "amount": "8000000000",
        "escrow": "0x88c4aaf835f27d1A75fF74474A769d73EC3aEeFB"
      },
      {
        "amount": "25000000000",
        "escrow": "0xF1f3393e65D443cC261bD0263Fe90386A5bA7647"
      },
      {
        "amount": "5000000000",
        "escrow": "0xEf8BaD6B2CC153d127573b889da124B87Bc9554d"
      },
      {
        "amount": "10000000000",
        "escrow": "0xa8382103c3c067f3a654B79eBcd8aAb9D1bD8196"
      },
      {
        "amount": "75000000000",
        "escrow": "0xA7111511543161F777652274C4F770eDd4e369A9"
      },
      {
        "amount": "5000000000",
        "escrow": "0x6619F82eB609696B2AEF0995A079291cBFf98e72"
      },
      {
        "amount": "50000000000",
        "escrow": "0xB1020f8C1211638acae973FFae3129d8d59Dfe95"
      },
      {
        "amount": "20000000000",
        "escrow": "0x9a732B06e8C2349a46c4cF4409eB09C10d373e6E"
      },
      {
        "amount": "25000000000",
        "escrow": "0x9Bc63dDCA2EC543307725d66DFBc59662Af4DAdC"
      },
      {
        "amount": "15000000000",
        "escrow": "0xE46F678C35D88083Dd54fB5eB3fE566719083495"
      },
      {
        "amount": "30000000000",
        "escrow": "0x79f6ca3fCBC428a12384e9b797e0b7888cA63Bbf"
      },
      {
        "amount": "30000000000",
        "escrow": "0x63568902BaBfAb43cc1508029968e5F0Ee00c591"
      },
      {
        "amount": "50000000000",
        "escrow": "0x72D41b2df69606914827315e2DfFE36B3CD6787C"
      },
      {
        "amount": "50000000000",
        "escrow": "0x1450592C5aaa5655dcfB748f89257806771bA276"
      },
      {
        "amount": "25000000000",
        "escrow": "0x9B72B7c7bBDD52712931cc38D5AbBe473d495e3e"
      },
      {
        "amount": "2000000000",
        "escrow": "0x8724dE03b7E76Fa5cc50deaf812583BbD709Cf04"
      }
    ]
  ],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "",
  "gas": "1136521",
  "from": "0x3e166454c7781d3fD4ceaB18055cad87136970Ea",
  "transactionSettings": {
    "chainId": 1,
    "nonce": "26",
    "baseFee": "625392176",
    "priorityFee": "1000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OPENXAI",
  "artifact": {
    "abi": [
      {
        "type": "constructor",
        "inputs": [
          {
            "name": "_ethOracle",
            "type": "address",
            "internalType": "contract AggregatorV3Interface"
          },
          {
            "name": "_wrappedEth",
            "type": "address[]",
            "internalType": "contract IERC20[]"
          },
          {
            "name": "_stableCoins",
            "type": "address[]",
            "internalType": "contract IERC20[]"
          },
          {
            "name": "_tiers",
            "type": "tuple[]",
            "internalType": "struct OpenxAIGenesis.Tier[]",
            "components": [
              { "name": "amount", "type": "uint96", "internalType": "uint96" },
              {
                "name": "escrow",
                "type": "address",
                "internalType": "address payable"
              }
            ]
          }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "rescue",
        "inputs": [
          {
            "name": "_token",
            "type": "address",
            "internalType": "contract IERC20"
          },
          {
            "name": "_receiver",
            "type": "address",
            "internalType": "address payable"
          },
          { "name": "_amount", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "tiers",
        "inputs": [
          { "name": "", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [
          { "name": "amount", "type": "uint96", "internalType": "uint96" },
          {
            "name": "escrow",
            "type": "address",
            "internalType": "address payable"
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "transfer_erc20",
        "inputs": [
          {
            "name": "_token",
            "type": "address",
            "internalType": "contract IERC20"
          },
          { "name": "_amount", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "transfer_native",
        "inputs": [],
        "outputs": [],
        "stateMutability": "payable"
      },
      {
        "type": "event",
        "name": "Participated",
        "inputs": [
          {
            "name": "tier",
            "type": "uint256",
            "indexed": true,
            "internalType": "uint256"
          },
          {
            "name": "account",
            "type": "address",
            "indexed": true,
            "internalType": "address"
          },
          {
            "name": "amount",
            "type": "uint256",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "anonymous": false
      },
      { "type": "error", "name": "FailedCall", "inputs": [] },
      {
        "type": "error",
        "name": "InsufficientBalance",
        "inputs": [
          { "name": "balance", "type": "uint256", "internalType": "uint256" },
          { "name": "needed", "type": "uint256", "internalType": "uint256" }
        ]
      },
      {
        "type": "error",
        "name": "InvalidPrice",
        "inputs": [
          { "name": "price", "type": "int256", "internalType": "int256" }
        ]
      },
      {
        "type": "error",
        "name": "NotRescue",
        "inputs": [
          { "name": "caller", "type": "address", "internalType": "address" },
          { "name": "rescue", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "SafeERC20FailedOperation",
        "inputs": [
          { "name": "token", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "UnsupportedTransferToken",
        "inputs": [
          {
            "name": "token",
            "type": "address",
            "internalType": "contract IERC20"
          }
        ]
      }
    ],
    "bytecode": "0x6080604052346102a857610b9a80380380610019816102ac565b9283398101906080818303126102a85780516001600160a01b038116908190036102a85760208201516001600160401b0381116102a8578361005c9184016102e8565b60408301519091906001600160401b0381116102a8578461007e9185016102e8565b606084015190936001600160401b0382116102a857019084601f830112156102a8578151946100b46100af876102d1565b6102ac565b9260208488815201916020839860061b830101918183116102a857602001925b8284106102425750505f80546001600160a01b03191693909317835550505b825181101561012d576001906001600160a01b03610111828661034c565b51165f528160205260405f208260ff19825416179055016100f3565b8482855f5b815181101561016d576001906001600160a01b03610150828561034c565b51165f52600260205260405f208260ff1982541617905501610132565b5050519068010000000000000000821161022e57600354826003558083106101ea575b509060035f5260205f205f925b8284106101b35760405161082590816103758239f35b8051805160209182015160601b6001600160601b0319166001600160601b039190911617835560019485019492909201910161019d565b60035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9081019083015b8181106102235750610190565b5f8155600101610216565b634e487b7160e01b5f52604160045260245ffd5b6040848303126102a85760408051919082016001600160401b0381118382101761022e5760405284516001600160601b03811681036102a85782526020850151906001600160a01b03821682036102a857826020928360409501528152019301926100d4565b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761022e57604052565b6001600160401b03811161022e5760051b60200190565b9080601f830112156102a8578151906103036100af836102d1565b9260208085858152019360051b8201019182116102a857602001915b81831061032c5750505090565b82516001600160a01b03811681036102a85781526020928301920161031f565b80518210156103605760209160051b010190565b634e487b7160e01b5f52603260045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c8063039af9eb146101a157806320ff430b146100da5780638195f2651461005e5763ad24207014610045575f80fd5b5f36600319011261005a57610058610574565b005b5f80fd5b3461005a57604036600319011261005a57610077610211565b6001600160a01b0381165f8181526001602052604090205490916024359160ff16156100a757610058925061046f565b825f52600260205260ff60405f2054165f146100c7576100589250610336565b826305cdbfcb60e51b5f5260045260245ffd5b3461005a57606036600319011261005a576100f3610211565b602435906001600160a01b03821680830361005a5760443591733e166454c7781d3fd4ceab18055cad87136970ea3303610176576001600160a01b0381166101405750506100589161025d565b909161005893506040519263a9059cbb60e01b60208501526024840152604483015260448252610171606483610227565b610670565b63b0b591e160e01b5f5233600452733e166454c7781d3fd4ceab18055cad87136970ea60245260445ffd5b3461005a57602036600319011261005a5760043560035481101561005a576101ca6040916101e5565b50548151906001600160601b038116825260601c6020820152f35b6003548110156101fd5760035f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b600435906001600160a01b038216820361005a57565b90601f8019910116810190811067ffffffffffffffff82111761024957604052565b634e487b7160e01b5f52604160045260245ffd5b8147106102de575f918291829182916001600160a01b03165af13d156102d6573d9067ffffffffffffffff821161024957604051916102a6601f8201601f191660200184610227565b82523d5f602084013e5b156102b85750565b8051156102c757805190602001fd5b63d6bda27560e01b5f5260045ffd5b6060906102b0565b504763cf47918160e01b5f5260045260245260445ffd5b9190820391821161030257565b634e487b7160e01b5f52601160045260245ffd5b906001600160601b03809116911603906001600160601b03821161030257565b5f905b600354821015610439576001600160601b03610354836101e5565b505416801561042f578381106103cd57506001600160601b036103af83610390866103bb9561038386986101e5565b505460601c9033906106d3565b604051868152815f5160206107d05f395f51905f5260203393a36101e5565b50931682845416610316565b166001600160601b0319825416179055565b8083946103ef61040e936103e3600196976101e5565b505460601c33886106d3565b604051828152865f5160206107d05f395f51905f5260203393a36102f5565b92610418816101e5565b5080546001600160601b03191690555b0190610339565b5090600190610428565b505050565b8181029291811591840414171561030257565b811561045b570490565b634e487b7160e01b5f52601260045260245ffd5b90670de0b6b3a764000061048a61048461072e565b8361043e565b04915f919083825b60035485101561056c576001600160601b036104ad866101e5565b5054168015610561578681106104df575050506103af836103906103bb946001600160601b03969461038388966101e5565b806105398497989661050085966104fb60019761053f9761043e565b610451565b9061051a8261050e8d6101e5565b505460601c338b6106d3565b6040518481528b5f5160206107d05f395f51905f5260203393a36102f5565b956102f5565b95610549816101e5565b5080546001600160601b03191690555b019390610492565b509093600190610559565b505050505050565b670de0b6b3a764000061058e61058861072e565b3461043e565b045f34825b600354831015610660576001600160601b036105ae846101e5565b5054168015610656578481106105e75750506001600160601b036103af836103906103bb946105dd85976101e5565b505460601c61025d565b6106359061062f839596946106026001956104fb348661043e565b90610610826105dd8b6101e5565b604051848152895f5160206107d05f395f51905f5260203393a36102f5565b936102f5565b9361063f816101e5565b5080546001600160601b03191690555b0191610593565b509160019061064f565b50905061066e91503361025d565b565b905f602091828151910182855af1156106c8575f513d6106bf57506001600160a01b0381163b155b61069f5750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b60011415610698565b6040513d5f823e3d90fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815261066e91610171608483610227565b519069ffffffffffffffffffff8216820361005a57565b5f54604051633fabe5a360e21b81529060a090829060049082906001600160a01b03165afa9081156106c8575f91610782575b505f8112610770576064900590565b6338ee04a760e01b5f5260045260245ffd5b905060a0813d60a0116107c7575b8161079d60a09383610227565b8101031261005a576107ae81610717565b506107c0608060208301519201610717565b505f610761565b3d915061079056febfe142be8d62c9f4b8867c2fb8a74f5db596e853095acccbcd78c1d904b27efba2646970667358221220d21db3b93eff428285f7239b20c1fccd1c7c2526c1d268efe5eb9b18e81a3d9a64736f6c634300081c0033",
    "compiler": { "version": "v0.8.28+commit.7893614a" },
    "contractName": "src/OpenxAIGenesis.sol:OpenxAIGenesis",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
        },
        "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Errors.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "src/OpenxAIGenesis.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {SafeERC20, IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"../lib/openzeppelin-contracts/contracts/utils/Address.sol\";\n\nimport {AggregatorV3Interface} from \"../lib/chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nimport {Rescue} from \"./Rescue.sol\";\n\ncontract OpenxAIGenesis is Rescue {\n  error UnsupportedTransferToken(IERC20 token);\n  error InvalidPrice(int256 price);\n\n  event Participated(\n    uint256 indexed tier,\n    address indexed account,\n    uint256 amount\n  );\n\n  /// Convert ETH to stable coin value\n  AggregatorV3Interface internal ethOracle;\n\n  /// Token that is required to be transferred.\n  mapping(IERC20 => bool) internal wrappedEth;\n  mapping(IERC20 => bool) internal stableCoin;\n\n  /// Milestones that the transferred funds will be allocated to\n  struct Tier {\n    uint96 amount;\n    address payable escrow;\n  }\n  Tier[] public tiers;\n\n  constructor(\n    AggregatorV3Interface _ethOracle,\n    IERC20[] memory _wrappedEth,\n    IERC20[] memory _stableCoins,\n    Tier[] memory _tiers\n  ) {\n    ethOracle = _ethOracle;\n    for (uint256 i; i < _wrappedEth.length; i++) {\n      wrappedEth[_wrappedEth[i]] = true;\n    }\n    for (uint256 i; i < _stableCoins.length; i++) {\n      stableCoin[_stableCoins[i]] = true;\n    }\n    tiers = _tiers;\n  }\n\n  function transfer_native() external payable {\n    _native_contribution();\n  }\n\n  function transfer_erc20(IERC20 _token, uint256 _amount) external {\n    if (wrappedEth[_token]) {\n      _wrappedeth_contribution(_token, _amount);\n    } else if (stableCoin[_token]) {\n      _stablecoin_contribution(_token, _amount);\n    } else {\n      revert UnsupportedTransferToken(_token);\n    }\n  }\n\n  function _eth_price() internal view returns (uint256 price) {\n    (, int256 ethPrice, , , ) = ethOracle.latestRoundData();\n    if (ethPrice < 0) {\n      revert InvalidPrice(ethPrice);\n    }\n\n    // Assume decimals of price oracle is 8, while stable coin is 6\n    price = uint256(ethPrice / 100);\n  }\n\n  function _native_contribution() internal {\n    uint256 usdTotal = (msg.value * _eth_price()) / (10 ** 18);\n    uint256 usdRemaining = usdTotal;\n    uint256 ethRemaining = msg.value;\n\n    for (uint256 i; i < tiers.length; i++) {\n      uint96 usdInTier = tiers[i].amount;\n      if (usdInTier == 0) {\n        // Tier empty, skip (save gas)\n        continue;\n      }\n\n      if (usdInTier >= usdRemaining) {\n        // contribution fits within this tier\n        Address.sendValue(tiers[i].escrow, ethRemaining);\n        emit Participated(i, msg.sender, usdRemaining);\n        tiers[i].amount -= uint96(usdRemaining); // usd remaining is smaller than usd in tier, thus fits in uint96\n        return;\n      } else {\n        // contribution overflows to next tier\n        uint256 ethUsed = (usdInTier * msg.value) / usdTotal;\n        Address.sendValue(tiers[i].escrow, ethUsed);\n        emit Participated(i, msg.sender, usdInTier);\n        ethRemaining -= ethUsed;\n        usdRemaining -= usdInTier;\n        tiers[i].amount = 0;\n      }\n    }\n\n    // Refund leftover ETH if tiers are full\n    Address.sendValue(payable(msg.sender), ethRemaining);\n  }\n\n  function _wrappedeth_contribution(IERC20 _token, uint256 _amount) internal {\n    uint256 usdTotal = (_amount * _eth_price()) / (10 ** 18);\n    uint256 usdRemaining = usdTotal;\n    uint256 ethRemaining = _amount;\n\n    for (uint256 i; i < tiers.length; i++) {\n      uint96 usdInTier = tiers[i].amount;\n      if (usdInTier == 0) {\n        // Tier empty, skip (save gas)\n        continue;\n      }\n\n      if (usdInTier >= usdRemaining) {\n        // contribution fits within this tier\n        SafeERC20.safeTransferFrom(\n          _token,\n          msg.sender,\n          tiers[i].escrow,\n          ethRemaining\n        );\n        emit Participated(i, msg.sender, usdRemaining);\n        tiers[i].amount -= uint96(usdRemaining); // usd remaining is smaller than usd in tier, thus fits in uint96\n        return;\n      } else {\n        // contribution overflows to next tier\n        uint256 ethUsed = (usdInTier * _amount) / usdTotal;\n        SafeERC20.safeTransferFrom(\n          _token,\n          msg.sender,\n          tiers[i].escrow,\n          ethUsed\n        );\n        emit Participated(i, msg.sender, usdInTier);\n        ethRemaining -= ethUsed;\n        usdRemaining -= usdInTier;\n        tiers[i].amount = 0;\n      }\n    }\n  }\n\n  function _stablecoin_contribution(IERC20 _token, uint256 _amount) internal {\n    uint256 usdTotal = _amount;\n    uint256 usdRemaining = usdTotal;\n\n    for (uint256 i; i < tiers.length; i++) {\n      uint96 usdInTier = tiers[i].amount;\n      if (usdInTier == 0) {\n        // Tier empty, skip (save gas)\n        continue;\n      }\n\n      if (usdInTier >= usdRemaining) {\n        // contribution fits within this tier\n        SafeERC20.safeTransferFrom(\n          _token,\n          msg.sender,\n          tiers[i].escrow,\n          usdRemaining\n        );\n        emit Participated(i, msg.sender, usdRemaining);\n        tiers[i].amount -= uint96(usdRemaining); // usd remaining is smaller than usd in tier, thus fits in uint96\n        return;\n      } else {\n        // contribution overflows to next tier\n        SafeERC20.safeTransferFrom(\n          _token,\n          msg.sender,\n          tiers[i].escrow,\n          usdInTier\n        );\n        emit Participated(i, msg.sender, usdInTier);\n        usdRemaining -= usdInTier;\n        tiers[i].amount = 0;\n      }\n    }\n  }\n}\n"
        },
        "src/Rescue.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {SafeERC20, IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"../lib/openzeppelin-contracts/contracts/utils/Address.sol\";\n\ncontract Rescue {\n  address private constant RESCUE = 0x3e166454c7781d3fD4ceaB18055cad87136970Ea;\n  error NotRescue(address caller, address rescue);\n\n  function rescue(\n    IERC20 _token,\n    address payable _receiver,\n    uint256 _amount\n  ) external {\n    if (msg.sender != RESCUE) {\n      revert NotRescue(msg.sender, RESCUE);\n    }\n\n    if (address(_token) == address(0)) {\n      Address.sendValue(_receiver, _amount);\n    } else {\n      SafeERC20.safeTransfer(_token, _receiver, _amount);\n    }\n  }\n}\n"
        }
      },
      "settings": {
        "remappings": [
          "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
          "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
          "chainlink/=lib/chainlink/",
          "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/",
          "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
          "openzeppelin-contracts/=lib/openzeppelin-contracts/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "cancun",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/git/openmesh/openxai-token",
  "submitted": {
    "transactionHash": "0x647f628a284aefc9a4b4d807ef5f3f12b4fe1203835532d87d4d7dcbe0e897e9",
    "date": "2025-02-27T08:23:00.500Z"
  }
}
