{
  "type": "deployment",
  "id": "OpenxAIGenesis",
  "batch": "testnet-genesis",
  "batchIndex": 0,
  "deploymentAddress": "0x84599c907B42e9bc21F9FE26D9e5A5D3747109D3",
  "constructorArgs": [
    "0x519ce4C129a981B2CBB4C3990B1391dA24E8EbF3",
    "0x4aDC67696bA383F43DD60A9e78F2C97Fbbfc7cb1",
    [],
    [
      "0xEE5b5633B8fa453bD1a4A24973c742BD0488D1C6",
      "0x036CbD53842c5426634e7929541eC2318f3dCF7e"
    ],
    [
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "10000000000",
      "100000000000"
    ]
  ],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x000000000000000000000000000000000000000000000000004f50454e58414960c06040523461027757610c18803803806100198161027b565b92833981019060a0818303126102775780516001600160a01b0381168103610277576020820151906001600160a01b03821682036102775760408301516001600160401b03811161027757846100709185016102b7565b60608401519092906001600160401b03811161027757856100929186016102b7565b608085015190946001600160401b03821161027757019185601f84011215610277578251956100c86100c3886102a0565b61027b565b9360208589815201906020829960051b82010192831161027757602001905b8282106102675750505060805260a0525f5b8251811015610133576001906001600160a01b03610117828661031b565b51165f525f60205260405f208260ff19825416179055016100f9565b8482855f5b8151811015610172576001906001600160a01b03610156828561031b565b51165f528160205260405f208260ff1982541617905501610138565b505051906001600160401b03821161025357680100000000000000008211610253576002548260025580831061020f575b509060025f5260205f20915f5b8281106101fb576040516108d49081610344823960805181818161038801528181610405015281816105170152818161056c01528181610647015261068c015260a051816107cd0152f35b6001906020835193019281860155016101b0565b60025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9081019083015b81811061024857506101a3565b5f815560010161023b565b634e487b7160e01b5f52604160045260245ffd5b81518152602091820191016100e7565b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761025357604052565b6001600160401b0381116102535760051b60200190565b9080601f83011215610277578151906102d26100c3836102a0565b9260208085858152019360051b82010191821161027757602001915b8183106102fb5750505090565b82516001600160a01b0381168103610277578152602092830192016102ee565b805182101561032f5760209160051b010190565b634e487b7160e01b5f52603260045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c8063039af9eb146101da57806320ff430b146100da5780638195f2651461005e5763ad24207014610045575f80fd5b5f36600319011261005a576100586105ee565b005b5f80fd5b3461005a57604036600319011261005a5761007761023e565b6001600160a01b0381165f8181526020819052604090205490916024359160ff16156100a75761005892506104b2565b825f52600160205260ff60405f2054165f146100c7576100589250610343565b826305cdbfcb60e51b5f5260045260245ffd5b3461005a57606036600319011261005a576100f361023e565b6024356001600160a01b0381169081810361005a5760443591733e166454c7781d3fd4ceab18055cad87136970ea33036101af576001600160a01b0384169384610143575050610058925061028a565b9150916040519263a9059cbb60e01b5f5260045260245260205f60448180855af19060015f5114821615610190575b50906040521561017e57005b635274afe760e01b5f5260045260245ffd5b60018215166101a6573b15153d15161683610172565b823d5f823e3d90fd5b63b0b591e160e01b5f5233600452733e166454c7781d3fd4ceab18055cad87136970ea60245260445ffd5b3461005a57602036600319011261005a5760043560025481101561005a57610203602091610212565b90549060031b1c604051908152f35b60025481101561022a5760025f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b600435906001600160a01b038216820361005a57565b90601f8019910116810190811067ffffffffffffffff82111761027657604052565b634e487b7160e01b5f52604160045260245ffd5b81471061030b575f918291829182916001600160a01b03165af13d15610303573d9067ffffffffffffffff821161027657604051916102d3601f8201601f191660200184610254565b82523d5f602084013e5b156102e55750565b8051156102f457602081519101fd5b63d6bda27560e01b5f5260045ffd5b6060906102dd565b504763cf47918160e01b5f5260045260245260445ffd5b9190820391821161032f57565b634e487b7160e01b5f52601160045260245ffd5b91905f5b60025481101561047b5761035a81610212565b90549060031b1c8015610472578281106103f657506103cf6103de916103b0846103f4969760018060a01b037f00000000000000000000000000000000000000000000000000000000000000001690339061070f565b604051848152815f51602061087f5f395f51905f5260203393a3610212565b91909283548360031b1c610322565b82545f1960039390931b92831b1916911b179055565b565b909160019161045391610434827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316338a61070f565b604051828152855f51602061087f5f395f51905f5260203393a3610322565b9161045d81610212565b8154905f199060031b1b191690555b01610347565b5060019061046c565b50509050565b8181029291811591840414171561032f57565b811561049e570490565b634e487b7160e01b5f52601260045260245ffd5b670de0b6b3a76400006104cc6104c66107b8565b84610481565b0490819083915f945b6002548610156105e6576104e886610212565b90549060031b1c80156105da5785811061053f575050506103f4936103b06103de936103cf9360018060a01b037f00000000000000000000000000000000000000000000000000000000000000001690339061070f565b806105b284979661055f859661055a6001976105b897610481565b610494565b9061059382878060a01b037f000000000000000000000000000000000000000000000000000000000000000016338b61070f565b6040518481528b5f51602061087f5f395f51905f5260203393a3610322565b95610322565b956105c281610212565b8154905f199060031b1b191690555b019493906104d5565b509093946001906105d1565b505050505050565b670de0b6b3a76400006106086106026107b8565b34610481565b0480345f925b6002548410156107015761062184610212565b90549060031b1c80156106f65783811061066b5750506103cf6103f4936103b06103de937f000000000000000000000000000000000000000000000000000000000000000061028a565b6106d5906106cf83959461068560019561055a3486610481565b906106b0827f000000000000000000000000000000000000000000000000000000000000000061028a565b604051848152895f51602061087f5f395f51905f5260203393a3610322565b93610322565b936106df81610212565b8154905f199060031b1b191690555b01929161060e565b5091926001906106ee565b5090506103f491503361028a565b6040516323b872dd60e01b5f9081526001600160a01b039384166004529290931660245260449390935260209060648180865af19060015f5114821615610780575b6040525f606052156107605750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b90600181151661079857823b15153d15161690610751565b503d5f823e3d90fd5b519069ffffffffffffffffffff8216820361005a57565b604051633fabe5a360e21b815260a0816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610873575f91610826575b505f8112610814576064900590565b6338ee04a760e01b5f5260045260245ffd5b905060a0813d60a01161086b575b8161084160a09383610254565b8101031261005a57610852816107a1565b506108646080602083015192016107a1565b505f610805565b3d9150610834565b6040513d5f823e3d90fdfebfe142be8d62c9f4b8867c2fb8a74f5db596e853095acccbcd78c1d904b27efba26469706673582212208ebd84f48a6584f995c6304b8444cc1926a609a9fa82ed244b95a6bb0a26630764736f6c634300081c0033000000000000000000000000519ce4c129a981b2cbb4c3990b1391da24e8ebf30000000000000000000000004adc67696ba383f43dd60a9e78f2c97fbbfc7cb100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ee5b5633b8fa453bd1a4a24973c742bd0488d1c6000000000000000000000000036cbd53842c5426634e7929541ec2318f3dcf7e000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000174876e800",
  "gas": "997694",
  "from": "0x519ce4C129a981B2CBB4C3990B1391dA24E8EbF3",
  "transactionSettings": {
    "chainId": 84532,
    "nonce": "24",
    "baseFee": "1000100",
    "priorityFee": "100000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OPENXAI",
  "artifact": {
    "abi": [
      {
        "type": "constructor",
        "inputs": [
          {
            "name": "_receiver",
            "type": "address",
            "internalType": "address payable"
          },
          {
            "name": "_ethOracle",
            "type": "address",
            "internalType": "contract AggregatorV3Interface"
          },
          {
            "name": "_wrappedEth",
            "type": "address[]",
            "internalType": "contract IERC20[]"
          },
          {
            "name": "_stableCoins",
            "type": "address[]",
            "internalType": "contract IERC20[]"
          },
          { "name": "_tiers", "type": "uint256[]", "internalType": "uint256[]" }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "rescue",
        "inputs": [
          {
            "name": "_token",
            "type": "address",
            "internalType": "contract IERC20"
          },
          {
            "name": "_receiver",
            "type": "address",
            "internalType": "address payable"
          },
          { "name": "_amount", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "tiers",
        "inputs": [
          { "name": "", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [
          { "name": "", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "transfer_erc20",
        "inputs": [
          {
            "name": "_token",
            "type": "address",
            "internalType": "contract IERC20"
          },
          { "name": "_amount", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "transfer_native",
        "inputs": [],
        "outputs": [],
        "stateMutability": "payable"
      },
      {
        "type": "event",
        "name": "Participated",
        "inputs": [
          {
            "name": "tier",
            "type": "uint256",
            "indexed": true,
            "internalType": "uint256"
          },
          {
            "name": "account",
            "type": "address",
            "indexed": true,
            "internalType": "address"
          },
          {
            "name": "amount",
            "type": "uint256",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "anonymous": false
      },
      { "type": "error", "name": "FailedCall", "inputs": [] },
      {
        "type": "error",
        "name": "InsufficientBalance",
        "inputs": [
          { "name": "balance", "type": "uint256", "internalType": "uint256" },
          { "name": "needed", "type": "uint256", "internalType": "uint256" }
        ]
      },
      {
        "type": "error",
        "name": "InvalidPrice",
        "inputs": [
          { "name": "price", "type": "int256", "internalType": "int256" }
        ]
      },
      {
        "type": "error",
        "name": "NotRescue",
        "inputs": [
          { "name": "caller", "type": "address", "internalType": "address" },
          { "name": "rescue", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "SafeERC20FailedOperation",
        "inputs": [
          { "name": "token", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "UnsupportedTransferToken",
        "inputs": [
          {
            "name": "token",
            "type": "address",
            "internalType": "contract IERC20"
          }
        ]
      }
    ],
    "bytecode": "0x60c06040523461027757610c18803803806100198161027b565b92833981019060a0818303126102775780516001600160a01b0381168103610277576020820151906001600160a01b03821682036102775760408301516001600160401b03811161027757846100709185016102b7565b60608401519092906001600160401b03811161027757856100929186016102b7565b608085015190946001600160401b03821161027757019185601f84011215610277578251956100c86100c3886102a0565b61027b565b9360208589815201906020829960051b82010192831161027757602001905b8282106102675750505060805260a0525f5b8251811015610133576001906001600160a01b03610117828661031b565b51165f525f60205260405f208260ff19825416179055016100f9565b8482855f5b8151811015610172576001906001600160a01b03610156828561031b565b51165f528160205260405f208260ff1982541617905501610138565b505051906001600160401b03821161025357680100000000000000008211610253576002548260025580831061020f575b509060025f5260205f20915f5b8281106101fb576040516108d49081610344823960805181818161038801528181610405015281816105170152818161056c01528181610647015261068c015260a051816107cd0152f35b6001906020835193019281860155016101b0565b60025f527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9081019083015b81811061024857506101a3565b5f815560010161023b565b634e487b7160e01b5f52604160045260245ffd5b81518152602091820191016100e7565b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761025357604052565b6001600160401b0381116102535760051b60200190565b9080601f83011215610277578151906102d26100c3836102a0565b9260208085858152019360051b82010191821161027757602001915b8183106102fb5750505090565b82516001600160a01b0381168103610277578152602092830192016102ee565b805182101561032f5760209160051b010190565b634e487b7160e01b5f52603260045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c8063039af9eb146101da57806320ff430b146100da5780638195f2651461005e5763ad24207014610045575f80fd5b5f36600319011261005a576100586105ee565b005b5f80fd5b3461005a57604036600319011261005a5761007761023e565b6001600160a01b0381165f8181526020819052604090205490916024359160ff16156100a75761005892506104b2565b825f52600160205260ff60405f2054165f146100c7576100589250610343565b826305cdbfcb60e51b5f5260045260245ffd5b3461005a57606036600319011261005a576100f361023e565b6024356001600160a01b0381169081810361005a5760443591733e166454c7781d3fd4ceab18055cad87136970ea33036101af576001600160a01b0384169384610143575050610058925061028a565b9150916040519263a9059cbb60e01b5f5260045260245260205f60448180855af19060015f5114821615610190575b50906040521561017e57005b635274afe760e01b5f5260045260245ffd5b60018215166101a6573b15153d15161683610172565b823d5f823e3d90fd5b63b0b591e160e01b5f5233600452733e166454c7781d3fd4ceab18055cad87136970ea60245260445ffd5b3461005a57602036600319011261005a5760043560025481101561005a57610203602091610212565b90549060031b1c604051908152f35b60025481101561022a5760025f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b600435906001600160a01b038216820361005a57565b90601f8019910116810190811067ffffffffffffffff82111761027657604052565b634e487b7160e01b5f52604160045260245ffd5b81471061030b575f918291829182916001600160a01b03165af13d15610303573d9067ffffffffffffffff821161027657604051916102d3601f8201601f191660200184610254565b82523d5f602084013e5b156102e55750565b8051156102f457602081519101fd5b63d6bda27560e01b5f5260045ffd5b6060906102dd565b504763cf47918160e01b5f5260045260245260445ffd5b9190820391821161032f57565b634e487b7160e01b5f52601160045260245ffd5b91905f5b60025481101561047b5761035a81610212565b90549060031b1c8015610472578281106103f657506103cf6103de916103b0846103f4969760018060a01b037f00000000000000000000000000000000000000000000000000000000000000001690339061070f565b604051848152815f51602061087f5f395f51905f5260203393a3610212565b91909283548360031b1c610322565b82545f1960039390931b92831b1916911b179055565b565b909160019161045391610434827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316338a61070f565b604051828152855f51602061087f5f395f51905f5260203393a3610322565b9161045d81610212565b8154905f199060031b1b191690555b01610347565b5060019061046c565b50509050565b8181029291811591840414171561032f57565b811561049e570490565b634e487b7160e01b5f52601260045260245ffd5b670de0b6b3a76400006104cc6104c66107b8565b84610481565b0490819083915f945b6002548610156105e6576104e886610212565b90549060031b1c80156105da5785811061053f575050506103f4936103b06103de936103cf9360018060a01b037f00000000000000000000000000000000000000000000000000000000000000001690339061070f565b806105b284979661055f859661055a6001976105b897610481565b610494565b9061059382878060a01b037f000000000000000000000000000000000000000000000000000000000000000016338b61070f565b6040518481528b5f51602061087f5f395f51905f5260203393a3610322565b95610322565b956105c281610212565b8154905f199060031b1b191690555b019493906104d5565b509093946001906105d1565b505050505050565b670de0b6b3a76400006106086106026107b8565b34610481565b0480345f925b6002548410156107015761062184610212565b90549060031b1c80156106f65783811061066b5750506103cf6103f4936103b06103de937f000000000000000000000000000000000000000000000000000000000000000061028a565b6106d5906106cf83959461068560019561055a3486610481565b906106b0827f000000000000000000000000000000000000000000000000000000000000000061028a565b604051848152895f51602061087f5f395f51905f5260203393a3610322565b93610322565b936106df81610212565b8154905f199060031b1b191690555b01929161060e565b5091926001906106ee565b5090506103f491503361028a565b6040516323b872dd60e01b5f9081526001600160a01b039384166004529290931660245260449390935260209060648180865af19060015f5114821615610780575b6040525f606052156107605750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b90600181151661079857823b15153d15161690610751565b503d5f823e3d90fd5b519069ffffffffffffffffffff8216820361005a57565b604051633fabe5a360e21b815260a0816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610873575f91610826575b505f8112610814576064900590565b6338ee04a760e01b5f5260045260245ffd5b905060a0813d60a01161086b575b8161084160a09383610254565b8101031261005a57610852816107a1565b506108646080602083015192016107a1565b505f610805565b3d9150610834565b6040513d5f823e3d90fdfebfe142be8d62c9f4b8867c2fb8a74f5db596e853095acccbcd78c1d904b27efba26469706673582212208ebd84f48a6584f995c6304b8444cc1926a609a9fa82ed244b95a6bb0a26630764736f6c634300081c0033",
    "compiler": { "version": "v0.8.28+commit.7893614a" },
    "contractName": "src/OpenxAIGenesis.sol:OpenxAIGenesis",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/chainlink-evm/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
        },
        "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        if (!_safeTransfer(token, to, value, true)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        if (!_safeTransferFrom(token, from, to, value, true)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _safeTransfer(token, to, value, false);\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _safeTransferFrom(token, from, to, value, false);\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        if (!_safeApprove(token, spender, value, false)) {\n            if (!_safeApprove(token, spender, 0, true)) revert SafeERC20FailedOperation(address(token));\n            if (!_safeApprove(token, spender, value, true)) revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity `token.transfer(to, value)` call, relaxing the requirement on the return value: the\n     * return value is optional (but if data is returned, it must not be false).\n     *\n     * @param token The token targeted by the call.\n     * @param to The recipient of the tokens\n     * @param value The amount of token to transfer\n     * @param bubble Behavior switch if the transfer call reverts: bubble the revert reason or return a false boolean.\n     */\n    function _safeTransfer(IERC20 token, address to, uint256 value, bool bubble) private returns (bool success) {\n        bytes4 selector = IERC20.transfer.selector;\n\n        assembly (\"memory-safe\") {\n            let fmp := mload(0x40)\n            mstore(0x00, selector)\n            mstore(0x04, and(to, shr(96, not(0))))\n            mstore(0x24, value)\n            success := call(gas(), token, 0, 0, 0x44, 0, 0x20)\n            // if call success and return is true, all is good.\n            // otherwise (not success or return is not true), we need to perform further checks\n            if iszero(and(success, eq(mload(0x00), 1))) {\n                // if the call was a failure and bubble is enabled, bubble the error\n                if and(iszero(success), bubble) {\n                    returndatacopy(fmp, 0, returndatasize())\n                    revert(fmp, returndatasize())\n                }\n                // if the return value is not true, then the call is only successful if:\n                // - the token address has code\n                // - the returndata is empty\n                success := and(success, and(iszero(returndatasize()), gt(extcodesize(token), 0)))\n            }\n            mstore(0x40, fmp)\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity `token.transferFrom(from, to, value)` call, relaxing the requirement on the return\n     * value: the return value is optional (but if data is returned, it must not be false).\n     *\n     * @param token The token targeted by the call.\n     * @param from The sender of the tokens\n     * @param to The recipient of the tokens\n     * @param value The amount of token to transfer\n     * @param bubble Behavior switch if the transfer call reverts: bubble the revert reason or return a false boolean.\n     */\n    function _safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value,\n        bool bubble\n    ) private returns (bool success) {\n        bytes4 selector = IERC20.transferFrom.selector;\n\n        assembly (\"memory-safe\") {\n            let fmp := mload(0x40)\n            mstore(0x00, selector)\n            mstore(0x04, and(from, shr(96, not(0))))\n            mstore(0x24, and(to, shr(96, not(0))))\n            mstore(0x44, value)\n            success := call(gas(), token, 0, 0, 0x64, 0, 0x20)\n            // if call success and return is true, all is good.\n            // otherwise (not success or return is not true), we need to perform further checks\n            if iszero(and(success, eq(mload(0x00), 1))) {\n                // if the call was a failure and bubble is enabled, bubble the error\n                if and(iszero(success), bubble) {\n                    returndatacopy(fmp, 0, returndatasize())\n                    revert(fmp, returndatasize())\n                }\n                // if the return value is not true, then the call is only successful if:\n                // - the token address has code\n                // - the returndata is empty\n                success := and(success, and(iszero(returndatasize()), gt(extcodesize(token), 0)))\n            }\n            mstore(0x40, fmp)\n            mstore(0x60, 0)\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity `token.approve(spender, value)` call, relaxing the requirement on the return value:\n     * the return value is optional (but if data is returned, it must not be false).\n     *\n     * @param token The token targeted by the call.\n     * @param spender The spender of the tokens\n     * @param value The amount of token to transfer\n     * @param bubble Behavior switch if the transfer call reverts: bubble the revert reason or return a false boolean.\n     */\n    function _safeApprove(IERC20 token, address spender, uint256 value, bool bubble) private returns (bool success) {\n        bytes4 selector = IERC20.approve.selector;\n\n        assembly (\"memory-safe\") {\n            let fmp := mload(0x40)\n            mstore(0x00, selector)\n            mstore(0x04, and(spender, shr(96, not(0))))\n            mstore(0x24, value)\n            success := call(gas(), token, 0, 0, 0x44, 0, 0x20)\n            // if call success and return is true, all is good.\n            // otherwise (not success or return is not true), we need to perform further checks\n            if iszero(and(success, eq(mload(0x00), 1))) {\n                // if the call was a failure and bubble is enabled, bubble the error\n                if and(iszero(success), bubble) {\n                    returndatacopy(fmp, 0, returndatasize())\n                    revert(fmp, returndatasize())\n                }\n                // if the return value is not true, then the call is only successful if:\n                // - the token address has code\n                // - the returndata is empty\n                success := and(success, and(iszero(returndatasize()), gt(extcodesize(token), 0)))\n            }\n            mstore(0x40, fmp)\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                revert(add(returndata, 0x20), mload(returndata))\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Errors.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "src/OpenxAIGenesis.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {SafeERC20, IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"../lib/openzeppelin-contracts/contracts/utils/Address.sol\";\n\nimport {AggregatorV3Interface} from \"../lib/chainlink-evm/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nimport {Rescue} from \"./Rescue.sol\";\n\ncontract OpenxAIGenesis is Rescue {\n  error UnsupportedTransferToken(IERC20 token);\n  error InvalidPrice(int256 price);\n\n  event Participated(\n    uint256 indexed tier,\n    address indexed account,\n    uint256 amount\n  );\n\n  /// Address that the contributions will be transferred to\n  address payable immutable receiver;\n\n  /// Convert ETH to stable coin value\n  AggregatorV3Interface internal immutable ethOracle;\n\n  /// Token that is required to be transferred.\n  mapping(IERC20 => bool) internal wrappedEth;\n  mapping(IERC20 => bool) internal stableCoin;\n\n  /// Contribution levels\n  uint256[] public tiers;\n\n  constructor(\n    address payable _receiver,\n    AggregatorV3Interface _ethOracle,\n    IERC20[] memory _wrappedEth,\n    IERC20[] memory _stableCoins,\n    uint256[] memory _tiers\n  ) {\n    receiver = _receiver;\n    ethOracle = _ethOracle;\n    for (uint256 i; i < _wrappedEth.length; i++) {\n      wrappedEth[_wrappedEth[i]] = true;\n    }\n    for (uint256 i; i < _stableCoins.length; i++) {\n      stableCoin[_stableCoins[i]] = true;\n    }\n    tiers = _tiers;\n  }\n\n  function transfer_native() external payable {\n    _native_contribution();\n  }\n\n  function transfer_erc20(IERC20 _token, uint256 _amount) external {\n    if (wrappedEth[_token]) {\n      _wrappedeth_contribution(_token, _amount);\n    } else if (stableCoin[_token]) {\n      _stablecoin_contribution(_token, _amount);\n    } else {\n      revert UnsupportedTransferToken(_token);\n    }\n  }\n\n  function _eth_price() internal view returns (uint256 price) {\n    (, int256 ethPrice, , , ) = ethOracle.latestRoundData();\n    if (ethPrice < 0) {\n      revert InvalidPrice(ethPrice);\n    }\n\n    // Assume decimals of price oracle is 8, while stable coin is 6\n    price = uint256(ethPrice / 100);\n  }\n\n  function _native_contribution() internal {\n    uint256 usdTotal = (msg.value * _eth_price()) / (10 ** 18);\n    uint256 usdRemaining = usdTotal;\n    uint256 ethRemaining = msg.value;\n\n    for (uint256 i; i < tiers.length; i++) {\n      uint256 usdInTier = tiers[i];\n      if (usdInTier == 0) {\n        // Tier empty, skip (save gas)\n        continue;\n      }\n\n      if (usdInTier >= usdRemaining) {\n        // contribution fits within this tier\n        Address.sendValue(receiver, ethRemaining);\n        emit Participated(i, msg.sender, usdRemaining);\n        tiers[i] -= usdRemaining; // usd remaining is smaller than usd in tier, thus no underflow\n        return;\n      } else {\n        // contribution overflows to next tier\n        uint256 ethUsed = (usdInTier * msg.value) / usdTotal;\n        Address.sendValue(receiver, ethUsed);\n        emit Participated(i, msg.sender, usdInTier);\n        ethRemaining -= ethUsed;\n        usdRemaining -= usdInTier;\n        tiers[i] = 0;\n      }\n    }\n\n    // Refund leftover ETH if tiers are full\n    Address.sendValue(payable(msg.sender), ethRemaining);\n  }\n\n  function _wrappedeth_contribution(IERC20 _token, uint256 _amount) internal {\n    uint256 usdTotal = (_amount * _eth_price()) / (10 ** 18);\n    uint256 usdRemaining = usdTotal;\n    uint256 ethRemaining = _amount;\n\n    for (uint256 i; i < tiers.length; i++) {\n      uint256 usdInTier = tiers[i];\n      if (usdInTier == 0) {\n        // Tier empty, skip (save gas)\n        continue;\n      }\n\n      if (usdInTier >= usdRemaining) {\n        // contribution fits within this tier\n        SafeERC20.safeTransferFrom(_token, msg.sender, receiver, ethRemaining);\n        emit Participated(i, msg.sender, usdRemaining);\n        tiers[i] -= usdRemaining; // usd remaining is smaller than usd in tier, thus no underflow\n        return;\n      } else {\n        // contribution overflows to next tier\n        uint256 ethUsed = (usdInTier * _amount) / usdTotal;\n        SafeERC20.safeTransferFrom(_token, msg.sender, receiver, ethUsed);\n        emit Participated(i, msg.sender, usdInTier);\n        ethRemaining -= ethUsed;\n        usdRemaining -= usdInTier;\n        tiers[i] = 0;\n      }\n    }\n  }\n\n  function _stablecoin_contribution(IERC20 _token, uint256 _amount) internal {\n    uint256 usdTotal = _amount;\n    uint256 usdRemaining = usdTotal;\n\n    for (uint256 i; i < tiers.length; i++) {\n      uint256 usdInTier = tiers[i];\n      if (usdInTier == 0) {\n        // Tier empty, skip (save gas)\n        continue;\n      }\n\n      if (usdInTier >= usdRemaining) {\n        // contribution fits within this tier\n        SafeERC20.safeTransferFrom(_token, msg.sender, receiver, usdRemaining);\n        emit Participated(i, msg.sender, usdRemaining);\n        tiers[i] -= usdRemaining; // usd remaining is smaller than usd in tier, thus no underflow\n        return;\n      } else {\n        // contribution overflows to next tier\n        SafeERC20.safeTransferFrom(_token, msg.sender, receiver, usdInTier);\n        emit Participated(i, msg.sender, usdInTier);\n        usdRemaining -= usdInTier;\n        tiers[i] = 0;\n      }\n    }\n  }\n}\n"
        },
        "src/Rescue.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {SafeERC20, IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"../lib/openzeppelin-contracts/contracts/utils/Address.sol\";\n\ncontract Rescue {\n  address private constant RESCUE = 0x3e166454c7781d3fD4ceaB18055cad87136970Ea;\n  error NotRescue(address caller, address rescue);\n\n  function rescue(\n    IERC20 _token,\n    address payable _receiver,\n    uint256 _amount\n  ) external {\n    if (msg.sender != RESCUE) {\n      revert NotRescue(msg.sender, RESCUE);\n    }\n\n    if (address(_token) == address(0)) {\n      Address.sendValue(_receiver, _amount);\n    } else {\n      SafeERC20.safeTransfer(_token, _receiver, _amount);\n    }\n  }\n}\n"
        }
      },
      "settings": {
        "remappings": [
          "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
          "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
          "chainlink-evm/=lib/chainlink-evm/",
          "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/",
          "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
          "openzeppelin-contracts/=lib/openzeppelin-contracts/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "cancun",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/git/openmesh/openxai-token",
  "submitted": {
    "transactionHash": "0x7557f17b202d814e0419b8c7a6f1b4e5ac0cbd96fd89751dcef81e3b75d72eba",
    "date": "2025-08-01T13:25:56.287Z"
  }
}
